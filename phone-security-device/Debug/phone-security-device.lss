
phone-security-device.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008eb  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a7  00000000  00000000  00000ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c7  00000000  00000000  0000128a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001754  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000405  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cc  00000000  00000000  00001be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001cb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	1e d0       	rcall	.+60     	; 0x7e <main>
  42:	3e c0       	rjmp	.+124    	; 0xc0 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <portsActivation>:
		SHCP_DOWN;
		if (DS_CHECK_UP) DS_DOWN;
		
	}
	STCP_UP;
	STCP_DOWN;
  46:	5f 98       	cbi	0x0b, 7	; 11
  48:	8a b1       	in	r24, 0x0a	; 10
  4a:	80 6e       	ori	r24, 0xE0	; 224
  4c:	8a b9       	out	0x0a, r24	; 10
  4e:	2e 98       	cbi	0x05, 6	; 5
  50:	8a b1       	in	r24, 0x0a	; 10
  52:	80 6c       	ori	r24, 0xC0	; 192
  54:	8a b9       	out	0x0a, r24	; 10
  56:	08 95       	ret

00000058 <registerPortActivation>:
}

void registerPortActivation (char number) //–§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç —Å–¥–≤–∏–≥–æ–≤–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞ 74ch595
{
	DS_UP;
  58:	5d 9a       	sbi	0x0b, 5	; 11
	for (int i = 0; i < number; i++)
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	18 16       	cp	r1, r24
  5e:	19 06       	cpc	r1, r25
  60:	5c f4       	brge	.+22     	; 0x78 <registerPortActivation+0x20>
  62:	20 e0       	ldi	r18, 0x00	; 0
  64:	30 e0       	ldi	r19, 0x00	; 0
	{
		SHCP_UP;
  66:	5e 9a       	sbi	0x0b, 6	; 11
		SHCP_DOWN;
  68:	5e 98       	cbi	0x0b, 6	; 11
		if (DS_CHECK_UP) DS_DOWN;
  6a:	4d 99       	sbic	0x09, 5	; 9
  6c:	5d 98       	cbi	0x0b, 5	; 11
}

void registerPortActivation (char number) //–§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç —Å–¥–≤–∏–≥–æ–≤–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞ 74ch595
{
	DS_UP;
	for (int i = 0; i < number; i++)
  6e:	2f 5f       	subi	r18, 0xFF	; 255
  70:	3f 4f       	sbci	r19, 0xFF	; 255
  72:	28 17       	cp	r18, r24
  74:	39 07       	cpc	r19, r25
  76:	b9 f7       	brne	.-18     	; 0x66 <registerPortActivation+0xe>
	{
		SHCP_UP;
		SHCP_DOWN;
		if (DS_CHECK_UP) DS_DOWN;
	}
	STCP_UP;
  78:	5f 9a       	sbi	0x0b, 7	; 11
	STCP_DOWN;
  7a:	5f 98       	cbi	0x0b, 7	; 11
  7c:	08 95       	ret

0000007e <main>:


int main(void)
{
	
setupCPU();
  7e:	17 d0       	rcall	.+46     	; 0xae <setupCPU>
portsActivation();
  80:	e2 df       	rcall	.-60     	; 0x46 <portsActivation>

OE_on;
  82:	2f 98       	cbi	0x05, 7	; 5
MR_on;
  84:	2e 9a       	sbi	0x05, 6	; 5

//test74hc595();
  
    while (1) 
    {
			char a = 1;
  86:	c1 e0       	ldi	r28, 0x01	; 1
			while(a<=16)
				{
				registerPortActivation(a);
  88:	8c 2f       	mov	r24, r28
  8a:	e6 df       	rcall	.-52     	; 0x58 <registerPortActivation>
				a++;
  8c:	cf 5f       	subi	r28, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f e9       	ldi	r18, 0x9F	; 159
  90:	86 e8       	ldi	r24, 0x86	; 134
  92:	91 e0       	ldi	r25, 0x01	; 1
  94:	21 50       	subi	r18, 0x01	; 1
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x16>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x20>
  9e:	00 00       	nop
				_delay_ms(500);
				MR_off;
  a0:	2e 98       	cbi	0x05, 6	; 5
				STCP_UP;
  a2:	5f 9a       	sbi	0x0b, 7	; 11
				MR_on;
  a4:	2e 9a       	sbi	0x05, 6	; 5
				STCP_DOWN;
  a6:	5f 98       	cbi	0x0b, 7	; 11
//test74hc595();
  
    while (1) 
    {
			char a = 1;
			while(a<=16)
  a8:	c1 31       	cpi	r28, 0x11	; 17
  aa:	71 f7       	brne	.-36     	; 0x88 <main+0xa>
  ac:	ec cf       	rjmp	.-40     	; 0x86 <main+0x8>

000000ae <setupCPU>:
#include "setupCPU.h"

void setupCPU () //ÙÛÌÍˆËˇ ÔÂ‚ÓÌ‡˜‡Î¸ÌÓÈ Ì‡ÒÚÓÈÍË ÔÓˆÂÒÒÓ‡
{
	
	PORTD = 0x00;
  ae:	1b b8       	out	0x0b, r1	; 11
	DDRD = 0xFF;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	8a b9       	out	0x0a, r24	; 10
	
	PORTB = 0x00;
  b4:	15 b8       	out	0x05, r1	; 5
	DDRB = 0xFF;
  b6:	84 b9       	out	0x04, r24	; 4
	
	PORTC = 0x00;
  b8:	18 b8       	out	0x08, r1	; 8
	DDRC = 0x3F;
  ba:	8f e3       	ldi	r24, 0x3F	; 63
  bc:	87 b9       	out	0x07, r24	; 7
  be:	08 95       	ret

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
